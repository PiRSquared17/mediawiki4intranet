# HG changeset patch
# User Vitaliy Filippov <vitali@st-filippov.office.custis.ru>
# Date 1267794911 -10800
Calendar support for Wikilog and MediaWiki Sidebar

diff -r 2f012c39365a -r be28a7f43145 extensions/Wikilog/SpecialWikilog.php
--- extensions/Wikilog/SpecialWikilog.php
+++ extensions/Wikilog/SpecialWikilog.php
@@ -155,6 +155,9 @@
 			$pager = new WikilogSummaryPager( $query, $opts['limit'], $this->including() );
 		}
 
+		global $wlCalPager;
+		$wlCalPager = $pager;
+
 		# Handle special page inclusion.
 		if ( $this->including() ) {
 			# Get pager body.
diff -r 2f012c39365a -r be28a7f43145 extensions/Wikilog/Wikilog.i18n.php
--- extensions/Wikilog/Wikilog.i18n.php
+++ extensions/Wikilog/Wikilog.i18n.php
@@ -18,6 +18,12 @@
 	'right-wl-postcomment' => 'Post comments to wikilog articles',
 	'right-wl-moderation' => 'Moderation of wikilog article comments',
 
+	# Calendar
+	'wikilogcalendar' => 'Wikilog calendar',
+	'wikilog-calendar-archive-link-title' => '$1 posts for $2',
+	'wikilog-calendar-prev' => '$1 ›',
+	'wikilog-calendar-next' => '‹ $1',
+
 	# Special:Wikilog
 	'wikilog-specialwikilog-title' => 'Wikilogs', # Page title
 	'wikilog-specialwikilog' => 'Wikilog', # Special page name (DEPRECATED AFTER MW1.16)
@@ -4862,6 +4868,8 @@
 	'wikilog-desc' => 'Добавляет возможность ведения блогов, создания гибрида вики и блога',
 	'wikilog-auto' => 'Викилог Авто',
 	'wikilog-help' => '{{ns:Help}}:Викилог',
+	'wikilogcalendar' => 'Календарь блога',
+	'wikilog-calendar-archive-link-title' => 'Записи $1 за $2',
 	'right-wl-postcomment' => 'оставлять комментарии к статьям викилога',
 	'right-wl-moderation' => 'модерировать комментарии к статьям викилога',
 	'wikilog-specialwikilog-title' => 'Викилоги',
diff -r 2f012c39365a -r be28a7f43145 extensions/Wikilog/Wikilog.php
--- extensions/Wikilog/Wikilog.php
+++ extensions/Wikilog/Wikilog.php
@@ -124,6 +124,11 @@
 $wgHooks['SkinTemplateTabAction'][] = 'Wikilog::SkinTemplateTabAction';
 $wgHooks['SkinTemplateTabs'][] = 'Wikilog::SkinTemplateTabs';
 
+// Calendar
+$wgEnableSidebarCache = false;
+$wgHooks['SkinBuildSidebar'][] = 'Wikilog::SkinBuildSidebar';
+$wgAutoloadClasses['WikilogCalendar'] = $dir . 'WikilogCalendar.php';
+
 // General Wikilog hooks
 $wgHooks['ArticleEditUpdates'][] = 'WikilogHooks::ArticleEditUpdates';
 $wgHooks['ArticleDeleteComplete'][] = 'WikilogHooks::ArticleDeleteComplete';
@@ -369,6 +374,24 @@
 		return true;
 	}
 
+    /**
+     * SkinBuildSidebar hook handler function.
+     * Adds support for "* wikilogcalendar" on MediaWiki:Sidebar
+     */
+    static function SkinBuildSidebar($skin, &$bar)
+    {
+        global $wgTitle, $wgRequest, $wgWikilogNumArticles;
+        if (array_key_exists('wikilogcalendar', $bar))
+        {
+            global $wlCalPager;
+            if (!$wlCalPager)
+                unset($bar['wikilogcalendar']);
+            else
+                $bar['wikilogcalendar'] = WikilogCalendar::sidebarCalendar($wlCalPager);
+        }
+        return true;
+    }
+
 	# ##
 	# #  Other global wikilog functions.
 	#
diff -r 2f012c39365a -r be28a7f43145 extensions/Wikilog/WikilogCalendar.php
--- /dev/null
+++ extensions/Wikilog/WikilogCalendar.php
@@ -0,0 +1,168 @@
+<?php
+
+# Wikilog Calendar
+# Календарь для расширения Wikilog
+# Copyright (c) Vitaliy Filippov, 2010
+
+class WikilogCalendar
+{
+    /* Weekday number (0-6) for the given UNIX time */
+    static function weekday($ts)
+    {
+        global $wgWikilogWeekStart;
+        if (!$wgWikilogWeekStart)
+            $wgWikilogWeekStart = 0;
+        return (date('N', $ts) + 6 - $wgWikilogWeekStart) % 7;
+    }
+    /* Next month */
+    static function nextMonth($m)
+    {
+        if (0+substr($m, 4, 2) < 12)
+            return substr($m, 0, 4) . sprintf("%02d", substr($m, 4, 2)+1);
+        return (substr($m, 0, 4) + 1) . '01';
+    }
+    /* Previous month */
+    static function prevMonth($m)
+    {
+        if (0+substr($m, 4, 2) > 1)
+            return substr($m, 0, 4) . sprintf("%02d", substr($m, 4, 2)-1);
+        return (substr($m, 0, 4) - 1) . '12';
+    }
+    /* Month and year name */
+    static function monthName($month)
+    {
+        global $wgContLang;
+        return $wgContLang->getMonthName(0+substr($month, 4, 2)).' '.substr($month, 0, 4);
+    }
+    /* Make HTML code for a multiple month calendar */
+    static function makeCalendar($dates, $pager)
+    {
+        if (!$dates)
+            return '';
+        $months = array();
+        foreach ($dates as $k => $d)
+        {
+            $m = substr($k, 0, 6);
+            $months[$m] = true;
+        }
+        krsort($months);
+        $months = array_keys($months);
+        $html = '';
+        foreach ($months as $m)
+            $html .= self::makeMonthCalendar($m, $dates);
+        /* append paging links */
+        $links = self::makePagingLinks($months, $pager);
+        $html = $links . $html . $links;
+        return $html;
+    }
+    /* Make HTML code for paging links */
+    static function makePagingLinks($months, $pager)
+    {
+        if ($pager->mIsFirst && $pager->mIsLast)
+            return '';
+        $urlLimit = $pager->mLimit == $pager->mDefaultLimit ? '' : $pager->mLimit;
+        if ($pager->mIsFirst)
+            $next = false;
+        else
+            $next = array('dir' => 'prev', 'offset' => ($nextmonth = self::nextMonth($months[0])).'01000000', 'limit' => $urlLimit);
+        if ($pager->mIsLast)
+            $prev = false;
+        else
+            $prev = array('dir' => 'next', 'offset' => ($prevmonth = $months[count($months)-1]).'01000000', 'limit' => $urlLimit );
+        $html = '<p class="wl-calendar-nav">';
+        if ($next)
+            $html .= $pager->makeLink(wfMsg('wikilog-calendar-next', self::monthName($nextmonth)), $next, 'next');
+        if ($prev)
+            $html .= $pager->makeLink(wfMsg('wikilog-calendar-prev', self::monthName(self::prevMonth($prevmonth))), $prev, 'prev');
+        $html .= '</p>';
+        return $html;
+    }
+    /* Make HTML code for a single month calendar */
+    static function makeMonthCalendar($month, $dates)
+    {
+        $max = self::nextMonth($month);
+        $max = wfTimestamp(TS_UNIX, $max.'01000000')-86400;
+        $max += 86400 * (6 - self::weekday($max));
+        $min = wfTimestamp(TS_UNIX, $month.'01000000');
+        $min -= 86400 * self::weekday($min);
+        $html = '<table class="wl-calendar"><tr>';
+        for ($ts = $min, $i = 0; $ts <= $max; $ts += 86400, $i++)
+        {
+            if ($i && !($i % 7))
+                $html .= '</tr><tr>';
+            $d = date('Ymd', $ts);
+            $html .= '<td class="';
+            if (substr($d, 0, 6) != $month)
+                $html .= 'wl-calendar-other ';
+            $html .= 'wl-calendar-day';
+            if ($date = $dates[$d])
+                $html .= '"><a href="'.htmlspecialchars($date['link']).'" title="'.htmlspecialchars($date['title']).'">';
+            else
+                $html .= '-empty">';
+            $html .= date('j', $ts);
+            if ($date)
+                $html .= '</a>';
+            $html .= '</td>';
+        }
+        $html .= '</tr></table>';
+        $html = '<p class="wl-calendar-month">'.self::monthName($month).'</p>' . $html;
+        return $html;
+    }
+    /* Make HTML code for calendar for the given fucking query object */
+    static function sidebarCalendar($pager)
+    {
+        global $wgRequest, $wgWikilogNumArticles;
+        $dbr = wfGetDB(DB_SLAVE);
+        $query = $pager->mQuery;
+        $info = $query->getQueryInfo($dbr);
+        $tables = $info['tables'];
+        $conds = $info['conds'] ? $info['conds'] : array();
+        $options = $info['options'] ? $info['options'] : array();
+        $join_conds = $info['join_conds'] ? $info['join_conds'] : array();
+        list($limit) = $wgRequest->getLimitOffset($wgWikilogNumArticles, '');
+        $offset = $wgRequest->getVal('offset');
+        if ($offset)
+            $conds[] = 'wlp_pubdate<' . $dbr->addQuotes($offset);
+        $options['LIMIT'] = intval($limit);
+        $options['ORDER BY'] = 'wlp_pubdate DESC';
+        $sql = $dbr->selectSQLText($tables, 'wikilog_posts.*', $conds, __FUNCTION__, $options, $join_conds);
+        $sql = "SELECT wlp_page, wlp_pubdate, COUNT(wlp_page) numposts FROM ($sql) derived GROUP BY SUBSTR(wlp_pubdate,1,8)";
+        /* build date hash */
+        $sp = Title::newFromText('Special:Wikilog');
+        $dates = array();
+        $res = $dbr->query($sql, __FUNCTION__);
+        while ($row = $dbr->fetchRow($res))
+        {
+            $date = substr($row['wlp_pubdate'], 0, 8);
+            if ($row['numposts'] == 1)
+            {
+                /* link to the post if it's the only one for that date */
+                $title = Title::newFromId($row['wlp_page']);
+                $dates[$date] = array(
+                    'link'  => $title->getLocalUrl(),
+                    'title' => $title->getPrefixedText(),
+                );
+            }
+            else
+            {
+                /* link to archive page if there's more than one post for that date */
+                $dates[$date] = array(
+                    'link'  => $sp->getLocalUrl(array(
+                        view  => 'archives',
+                        year  => substr($date, 0, 4),
+                        month => substr($date, 4, 2),
+                        day   => substr($date, 6, 2),
+                    )),
+                    'title' => wfMsgExt('wikilog-calendar-archive-link-title', 'parseinline',
+                        $sp->getPrefixedText(),
+                        date('Y-m-d', wfTimestamp(TS_UNIX, $row['wlp_pubdate']))
+                    ),
+                );
+            }
+        }
+        $dbr->freeResult($res);
+        /* build calendar HTML code */
+        $html = self::makeCalendar($dates, $pager);
+        return $html;
+    }
+}
diff -r 2f012c39365a -r be28a7f43145 extensions/Wikilog/WikilogItemPager.php
--- extensions/Wikilog/WikilogItemPager.php
+++ extensions/Wikilog/WikilogItemPager.php
@@ -57,8 +57,8 @@
 	public $mLimitsShown = array( 5, 10, 20, 50 );
 
 	# Local variables.
-	protected $mQuery = null;			///< Wikilog item query data
-	protected $mIncluding = false;		///< If pager is being included
+	public $mQuery = null;			///< Wikilog item query data
+	public $mIncluding = false;		///< If pager is being included
 
 	/**
 	 * Constructor.
@@ -371,8 +371,8 @@
 	implements WikilogItemPager
 {
 	# Local variables.
-	protected $mQuery = null;			///< Wikilog item query data
-	protected $mIncluding = false;		///< If pager is being included
+	public $mQuery = null;			///< Wikilog item query data
+	public $mIncluding = false;		///< If pager is being included
 
 	/**
 	 * Constructor.
diff -r 2f012c39365a -r be28a7f43145 extensions/Wikilog/WikilogMainPage.php
--- extensions/Wikilog/WikilogMainPage.php
+++ extensions/Wikilog/WikilogMainPage.php
@@ -95,6 +95,9 @@
 			$pager = new WikilogSummaryPager( $query );
 		}
 
+		global $wlCalPager;
+		$wlCalPager = $pager;
+
 		# Display list of wikilog posts.
 		$body = $pager->getBody();
 		$body .= $pager->getNavigationBar();
diff -r 2f012c39365a -r be28a7f43145 extensions/Wikilog/style/wikilog.css
--- extensions/Wikilog/style/wikilog.css
+++ extensions/Wikilog/style/wikilog.css
@@ -221,4 +221,34 @@
 	margin: 0;
 }
 
+table.wl-calendar {
+	margin-right: auto;
+	margin-left: auto;
+}
+
+.wl-calendar td {
+	text-align: right;
+	padding: 2px 3px 0 3px;
+	background-color: #f0f0f0;
+}
+
+.wl-calendar td.wl-calendar-day {
+	font-weight: bold;
+	background-color: #e0e0e0;
+}
+
+.wl-calendar td.wl-calendar-other {
+	color: gray;
+	background-color: transparent;
+	font-weight: normal;
+}
+
+.wl-calendar-nav a {
+	margin: 0 16px;
+}
+
+.wl-calendar-month {
+	margin: 8px 0 0 0;
+}
+
 /* kate: indent-mode normal; space-indent off; tab-width 4; */
