# HG changeset patch
# User Vitaliy Filippov <vitalif@yourcmc.ru>
# Date 1320668400 -10800
Bug 75715, Bug 68935 - Add Localisation Cache support for CACHE_ACCEL

diff -r 025d3c6531d8 -r 8d1f6616b0f7 includes/AutoLoader.php
--- includes/AutoLoader.php
+++ includes/AutoLoader.php
@@ -135,6 +135,7 @@
 	'IP' => 'includes/IP.php',
 	'Job' => 'includes/JobQueue.php',
 	'JSMin' => 'includes/JSMin.php',
+	'LCStore_Accel' => 'includes/LocalisationCache.php',
 	'LCStore_DB' => 'includes/LocalisationCache.php',
 	'LCStore_CDB' => 'includes/LocalisationCache.php',
 	'LCStore_Null' => 'includes/LocalisationCache.php',
diff -r 025d3c6531d8 -r 8d1f6616b0f7 includes/LocalisationCache.php
--- includes/LocalisationCache.php
+++ includes/LocalisationCache.php
@@ -2,6 +2,8 @@
 
 define( 'MW_LC_VERSION', 1 );
 
+require_once 'ObjectCache.php';
+
 /**
  * Class for caching the contents of localisation files, Messages*.php
  * and *.i18n.php.
@@ -155,8 +157,12 @@
 				case 'db':
 					$storeClass = 'LCStore_DB';
 					break;
+				case 'accel':
 				case 'detect':
-					$storeClass = $wgCacheDirectory ? 'LCStore_CDB' : 'LCStore_DB';
+					if ( !( wfGetCache( CACHE_ACCEL ) instanceof FakeMemCachedClient ) )
+						$storeClass = 'LCStore_Accel';
+					else
+						$storeClass = $wgCacheDirectory ? 'LCStore_CDB' : 'LCStore_DB';
 					break;
 				default:
 					throw new MWException( 
@@ -319,7 +325,10 @@
 		}
 
 		$deps = $this->store->get( $code, 'deps' );
-		if ( $deps === null ) {
+		$keys = $this->store->get( $code, 'list', 'messages' );
+		$preload = $this->store->get( $code, 'preload' );
+		// Different keys may expire separately, at least in LCStore_Accel
+		if ( $deps === null || $keys === null || $preload === null ) {
 			wfDebug( __METHOD__."($code): cache missing, need to make one\n" );
 			return true;
 		}
@@ -744,6 +753,54 @@
 }
 
 /**
+ * LCStore implementation which uses PHP accelerator to store data.
+ * This will work if one of XCache, eAccelerator, or APC cacher is configured.
+ * (See ObjectCache.php)
+ */
+class LCStore_Accel implements LCStore {
+	var $currentLang;
+	var $keys;
+
+	public function __construct() {
+		$this->cache = wfGetCache( CACHE_ACCEL );
+	}
+
+	public function get( $code, $key ) {
+		$k = wfMemcKey( 'l10n', $code, 'k', $key );
+		return $this->cache->get( $k );
+	}
+
+	public function startWrite( $code ) {
+		$k = wfMemcKey( 'l10n', $code, 'l' );
+		$keys = $this->cache->get( $k );
+		if ( $keys ) {
+			foreach ( $keys as $k ) {
+				$this->cache->delete( $k );
+			}
+		}
+		$this->currentLang = $code;
+		$this->keys = array();
+	}
+
+	public function finishWrite() {
+		if ( $this->currentLang ) {
+			$k = wfMemcKey( 'l10n', $this->currentLang, 'l' );
+			$this->cache->set( $k, array_keys( $this->keys ) );
+		}
+		$this->currentLang = NULL;
+		$this->keys = array();
+	}
+
+	public function set( $key, $value ) {
+		if ( $this->currentLang ) {
+			$k = wfMemcKey( 'l10n', $this->currentLang, 'k', $key );
+			$this->keys[$k] = true;
+			$this->cache->set( $k, $value );
+		}
+	}
+}
+
+/**
  * LCStore implementation which uses the standard DB functions to store data. 
  * This will work on any MediaWiki installation.
  */
